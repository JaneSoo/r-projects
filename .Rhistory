5+4
install.packages("circular")
print(b)
for (i in 1:length(a)){
b <- sum(a[1:i])
print(b)
}
print('Correct answer')
if(answer == 42){
print('Correct answer')
} else if(abs(answer - 42) <= 2){
print('Almost...')
} else {
print('Wrong answer')
}
# creating functions
add <- function(a, b, c=1){
# function adds up given values
# arguments: a ... number
#            b ... number
#            c ... number (default is 1)
# returns: number (sum of a, b and c)
return(a + b + c)
}
add(3, 4)
add(3, 4, c=2)
# creating functions
add <- function(a, b, c=1){
# function adds up given values
# arguments: a ... number
#            b ... number
#            c ... number (default is 1)
# returns: number (sum of a, b and c)
return(a + b + c)
}
# external libraries/scripts
# install library from CRAN
install.packages('circular')
install.packages("circular")
# execute code from file (useful when you want to load external functions)
source('my-functions.R')
plot(a, b, xlab='x-label', ylab='y-label', main='Main title')
plot(x,y, type='p') #points (default)
# graphics - check pdf for more
a = 1:100
b = sin(0.1 * a)
plot(a, b, xlab='x-label', ylab='y-label', main='Main title')
plot(x,y, type='p') #points (default)
plot(x,y, type='p') #points (default)
x <- a
y <- b
plot(x,y, type='p') #points (default)
plot(x,y, type='l') #lines
plot(x,y, type='b') #points and lines, but not connected
plot(x,y, type='c') #just the lines between points from type='b'
plot(x,y, type='o') #points and lines, connected
plot(x,y, type='s') #steps (first horizontal, then vertical)
plot(x,y, type='S') #steps (first vertical, then horizontal)
plot(x,y, type='h') #vertical lines from x-axis to given points
plot(x,y, type='n') #no plot, just axes
tail <- sample(0, 1000)
tail <- sample(0, 1000)
head <- sample(1, 1000)
x <- 0:1000
sample(x)
x <- rep(0, 1000)
y <- rep(1, 1000)
sample(x)
sample(y)
plot(sample(x), sample(y))
plot(cumsum(sample(x)), cumsum(sample(y)))
x <- seq(0,1, length=1000)
y <- seq(0,1, length=1000)
sample(x)
sample(y)
f
f <- seq(1,10, length=5)
f
g <- seq(1,11, by=2)
d <- rep(1, 10)
d
n <- 1000
sample(c(0,1), replace=TRUE, size=n)
y <- sample(c(0,1), replace=TRUE, size=n)
x <- sample(c(0,1), replace=TRUE, size=n)
x
cumsum(x)/1:1000
plot(a)
a <- cumsum(x)/1:1000
plot(a)
a <- cumsum(x)/1:1000
plot(a)
cumsum(x)
n <- 10
x <- sample(c(0,1), replace=TRUE, size=n)
x
cumsum(x)
a <- cumsum(x)/1:10
a
plot(a)
plot(a, type='l')
n <- 1000
x <- sample(c(0,1), replace=TRUE, size=n)
x
a <- cumsum(x)/1:1000
cumsum(x)
a
plot(a, type='l')
# data frames
df <- data.frame(numbers=1:10, letters=c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'))
df
# task 2
df <- data.frame(id=1:30, gender=c('M', 'F'), mark=c('A', 'B', 'C', 'D', 'E', 'F'))
df
# task 2
M <- 0.7
F <- 0.3
A <- 0.09
B <- 0.09
C <- 0.11
D <- 0.09
E <- 0.18
f <- 0.44
df <- data.frame(id=1:30, gender=c(M, F), mark=c(A, B, C, D, E, f))
df
m <- matrix(1:4, 2)
margin.table(m, 1)
margin.table(m, 2)
m
v1 <- matrix(c(0.12, 0.22, 0.06), 2)
v2 <- matrix(c(0.15, 0.34, 0.11), 2)
margin.table(v1, 1)
margin.table(v2, 2)
v1 <- matrix(c(0.12, 0.22, 0.06), 3)
v2 <- matrix(c(0.15, 0.34, 0.11), 3)
margin.table(v1, 1)
margin.table(v2, 2)
v1
v1 <- matrix(c(0.12, 0.15), 2)
v2 <- matrix(c(0.22, 0.34), 2)
v3 <- matrix(c(0.06, 0.11), 2)
table <- margin.table(v1, 1)
table <- margin.table(v2, 2)
table <- margin.table(v3, 3)
table
v1 <- matrix(c(0.12, 0.15), 2)
v2 <- matrix(c(0.22, 0.34), 2)
v3 <- matrix(c(0.06, 0.11), 2)
table <- margin.table(v1, 2)
table <- margin.table(v2, 2)
table <- margin.table(v3, 2)
table
v1 <- matrix(c(0.12, 0.15), 3)
v2 <- matrix(c(0.22, 0.34), 3)
v3 <- matrix(c(0.06, 0.11), 3)
table <- margin.table(v1, 1)
table <- margin.table(v2, 2)
table <- margin.table(v3, 3)
table
v1 <- matrix(c(0.12, 0.15), 2)
v2 <- matrix(c(0.22, 0.34), 2)
v3 <- matrix(c(0.06, 0.11), 2)
table <- margin.table(v1, 1)
table
table <- margin.table(v2, 2)
table
table <- margin.table(v3, 3)
v1 <- matrix(c(0.12, 0.15), c(0.22, 0.34), c(0.06, 0.11), 2)
#task 1
m <- matrix (
c(    0.12, 0.22, 0.06,
0.15, 0.34, 0.11,
),
ncol  = 3,
byrow = TRUE
)
table <- margin.table(m)
#task 1
m <- matrix (
c(    0.12, 0.22, 0.06,
0.15, 0.34, 0.11
),
ncol  = 3,
byrow = TRUE
)
table <- margin.table(m)
table
margin.table(m)
#task 1
m <- matrix (
c(    0.12, 0.22, 0.06,
0.15, 0.34, 0.11
),
ncol  = 3,
byrow = TRUE
)
margin.table(m)
m
rel.freq <- matrix(c(0.12, 0.22, 0.06, 0.15, 0.34, 0.11), nrow=2, byrow=T)
rownames(rel.freq) <- c('blue', 'brown')
colnames(rel.freq) <- c('blonde', 'brown', 'red')
rrel.freq
rel.freq
#1
(abs.freq <- rel.freq * 1000)
#2
rowSums(abs.freq)
margin.table(abs.freq, 1)
#3
colSums(abs.freq)
margin.table(abs.freq, 2)
#4
rowSums(abs.freq[row.names('blue')])
#4
prop.table(abs.freq, 2)
(abs.hair <- margin.table(abs.freq, 2)) # 2 = column
#4
cond.hair <- prop.table(abs.freq, 2) # sum each column down and divided by total of each column
cond.eye <- prop.table(abs.freq, 1)
(cond.eye <- prop.table(abs.freq, 1))
#6
barplot(abs.freq)
#6
barplot(abs.freq, space=0)
#6
barplot(abs.freq, space=0, ylab= 'absolute frequencies')
#6
barplot(abs.freq, space=0, ylab= 'absolute frequencies', legend.text = rownames(abs.freq))
#6
barplot(abs.freq, space=0, ylab= 'absolute frequencies', legend.text = rownames(abs.freq), args.legend = list(x='topleft', bty='n'))
#7
barplot(cond.hair, space = 0, ylab = 'relative frequencies')
#8
barplot(abs.freq, space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'))
#8
barplot(cond.eye, space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'))
#8
barplot(t(abs.freq), space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'))
#9
barplot(cond.eye, space = 0, ylab = 'relative frequencies')
#9
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies')
#10
barplot(abs.freq, space=0, ylab= 'absolute frequencies', legend.text = rownames(abs.freq), args.legend = list(x='topleft', bty='n'), col = c('dodgerblue', 'brown'))
#11
barplot(t(abs.freq), space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'), col = c('yellow', 'brown', 'orangered2'))
barplot(cond.hair, space = 0, ylab = 'relative frequencies', col = c('blue', 'brown'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'organge'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'organgered2'))
#11
barplot(t(abs.freq), space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'), col = c('yellow', 'brown', 'orangered2'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'orangered2'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'orangered2'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'orangered2'))
#11
barplot(t(abs.freq), space = 0, ylab = 'absolute frequencies', legend.text = colnames(abs.freq), args.legend = list(x='topleft', bty='n'), col = c('yellow', 'brown', 'orangered2'))
barplot(t(cond.eye), space = 0, ylab = 'relative frequencies', col = c('yellow', 'brown', 'orangered2'))
#12
pie(abs.eyes)
abs.eye <- margin.table(abs.freq, 1) #2nd solution 1= row
#12
pie(abs.eyes)
abs.eyes <- margin.table(abs.freq, 1) #2nd solution 1= row
#12
pie(abs.eyes)
#12
pie(abs.eyes, col = c('dodgerblue', 'brown'))
paste(names(abs.eyes), ' (', abs.eyes/sum(abs.eyes) * 100, '%)', sep='')
eye.label <- paste(names(abs.eyes), ' (', abs.eyes/sum(abs.eyes) * 100, '%)', sep='')
pie(abs.eyes, col = c('dodgerblue', 'brown'), labels = eye.label)
pie(abs.eyes, col = c('dodgerblue', 'brown'), labels = eye.label, main = 'Eye colour')
pie(abs.hair, col = c('yellow', 'brown', 'orangered2'), labels = hair.label, main = 'Hair colour')
hair.label <- paste(names(abs.hair), ' (', abs.hair/sum(abs.hair) * 100, '%)', sep = '')
pie(abs.hair, col = c('yellow', 'brown', 'orangered2'), labels = hair.label, main = 'Hair colour')
eye.label <- paste(names(abs.eyes), ' (', abs.eyes/sum(abs.eyes) * 100, '%)', sep='')
paste0(names(abs.eyes), ' (', abs.eyes/sum(abs.eyes) * 100, '%)') # no need separater
pie(abs.eyes, col = c('dodgerblue', 'brown'), labels = eye.label, main = 'Eye colour')
pie(abs.hair, col = c('yellow', 'brown', 'orangered2'), labels = hair.label, main = 'Hair colour', init.angle = 65)
#task 2
rainbow()
#task 2
rainbow(24)
#task 2
rainbow <- rainbow(24)
rainbow
pie(24, col = rainbow)
pie(24, col = rainbow())
pie(24, col = rainbow(24))
#task 2
k = 24
pie(k, col = rainbow(24))
pie
abs.eyes
#task 2
k = sample(c(1:24))
pie(k, col = rainbow(24))
#task 2
k = sample(c(1:20))
pie(k, col = rainbow(24))
pie(k, col = heat.colors(24))
pie(k, col = topo.colors(24))
pie(k, col = terrain.colors(24))
pie(k, col = grey(24))
pie(k, col = grey.colors(24))
#task 2
k = sample(c(1:24))
pie(k, col = rainbow(24))
pie(k, col = heat.colors(24))
pie(k, col = topo.colors(24))
pie(k, col = terrain.colors(24))
pie(k, col = rainbow(24), radius = 0.8)
pie(k, col = rainbow(24), radius = 0.2)
pie(k, col = rainbow(24), clockwise = FALSE)
pie(k, col = rainbow(24), density = 1)
pie(k, col = rainbow(24), density = NULL)
pie(k, col = rainbow(24))
pie(k, col = heat.colors(24))
pie(k, col = topo.colors(24))
pie(k, col = terrain.colors(24))
pie(k, col = rainbow(24), clockwise = 1)
pie(k, col = rainbow(24), clockwise = 2)
pie(k, col = rainbow(k))
pie(k, col = rainbow(24))
k
#task 2
k = sample(rep(1,24))
pie(k, col = rainbow(24))
pie(k, col = heat.colors(24))
pie(k, col = topo.colors(24))
pie(k, col = terrain.colors(24))
pie(k, col = grey.colors(24))
pie(k, col = rainbow(k))
pie(k, col = rainbow(24))
#task 3
iris
plot(iris)
iris$Petal.Length
iris$Petal.Length
iris$Petal.Width
iris$Species
points(iris$Sepal.Width)
plot(iris$Petal.Width:iris$Petal.Length, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)')
plot(iris$Petal.Width, iris$Petal.Length, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', )
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', )
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1)
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1, legend())
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1, legend(x, y=NULL))
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1, legend(x, y=NULL))
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1, legend.text =  rownames(iris$Species))
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1, legend.text = colnames(iris$Species))
plot(iris$Petal.Length, iris$Petal.Width, xlab = 'Petal Length (cm)', ylab = 'Petal Width (cm)', asp = 1)
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
install.packages('tinytex')
install.packages("xtable")
install.packages("xtable")
tinytex::install_tinytex()
xfun::session_info('rmarkdown')
tinytex::tinytex_root()
xfun::session_info('rmarkdown')
install.packages('tinytex')
tinytex::install_tinytex()
tinytex: pdflatex()
install.packages("knitr")
install.packages("ggplot2")
install.packages("lattice")
Howell <- read.csv('Howell.csv', header='T')
## this is so called chunk, where you write R-code, including loading data and libraries
setwd('/home/jane/Documents/SSME (Service Development Management)/Term2/MV013-Statistics for Computer Science/week5')
## this is so called chunk, where you write R-code, including loading data and libraries
setwd('/home/jane/Documents/SSME (Service Development Management)/Term2/MV013-Statistics for Computer Science/Assignment1')
Howell <- read.csv('Howell.csv', header='T')
Howell <- read.csv('Howell.csv')
Howell
Howell$Sex
Howell$XCB
Howell$Population
Howell$Sex(value='M')
typeof(Howell)
Howell$Sex["M"]
Howell.list
Howell.list[1]
male <- Howell[Howell$Sex == 'M', ]
male
Howell <- read.csv('Howell.csv')
Howell.Male <- Howell[Howell$Sex == 'M', ]
Howell <- Howell[Howell$Sex == 'M', Howell$Population == 'AUSTRALI', Howell$Population == 'PERU']
Howell <- read.csv('Howell.csv')
Howell.Male <- Howell[Howell$Sex == 'M', ]
data <- Howell[Howell$Sex == 'M', Howell$Population == 'AUSTRALI', Howell$Population == 'PERU']
Howell.Male <- Howell[Howell$Sex == 'M', ]
data <- Howell[Howell$Sex == 'M', Howell$Population == 'AUSTRALI', ]
data <- Howell[Howell$Population == 'AUSTRALI', ]
data
data <- Howell[Howell$Population == 'AUSTRALI' && == 'PERU', ]
data <- Howell[Howell$Population == 'AUSTRALI' && Howell$Population == 'PERU', ]
data
data <- Howell[Howell$Population == 'AUSTRALI' || Howell$Population == 'PERU', ]
data
data <- Howell[((Howell$Population == 'AUSTRALI' || Howell$Population == 'PERU') && Howell$Sex == 'M' && Howell$XCB), ]
data
Howell.Male
Howell.Male <- Howell[Howell$Sex == 'M', ]
data <- Howell.Male[((Howell.Male$Population == 'AUSTRALI' || Howell.Male$Population == 'PERU') && Howell.Male$XCB), ]
data
Howell.Male <- Howell[Howell$Sex == 'M', ]
Howell.Male.XCB <- Howell.Male$XCB
Howell.Male.XCB
